/*
Name: Mary-Rose Tracy 
ID#:1001852753 
Assignment: P06 Email
TODO: see program comments below
credit to prof rice
*/
package store;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;

import java.util.Objects;
import java.io.File;
public class Option implements Saveable {
    public Option(String name, long cost) {
        if(cost < 0) throw new IllegalArgumentException("Negative cost for " + name + ": " + cost);
        this.name = name;
        this.cost = cost;
        this.active = true;
    }

    public Option(String name, long cost, boolean active) {
        this(name, cost);
        this.active = active;
    }

    public Option(BufferedReader br) throws IOException {
        this.name = br.readLine();
        this.cost = Long.parseLong(br.readLine());
        this.active = Boolean.parseBoolean(br.readLine());
    }

    @Override
    public void save(BufferedWriter bw) throws IOException {
        bw.write(name + '\n');
        bw.write(Long.toString(cost) + '\n');
        bw.write(Boolean.toString(active) + '\n');
    }

    public long cost() {
        return this.cost;
    }

    public boolean isActive() {
        return active;
    }

    public void setActive(boolean active) {
        this.active = active;
    }
    public void setFilename(File file) {
    this.filename = file;
}

public File getFilename() {
    return filename;
}

    @Override
    public String toString() {
        long cents = cost % 100;
        return name + " ($" + cost / 100 + "." + ((cents < 10) ? "0" : "") + cents + ")" + (active ? "" : " [INACTIVE]");
    }

    @Override
    public boolean equals(Object o) {
        try {
            if (this == o) return true;
            if (this.getClass() != o.getClass()) return false;
            Option p = (Option) o;
            return this.name.equals(p.name) && (this.cost == p.cost) && (this.active == p.active);
        } catch (Exception e) {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return Objects.hash(name, cost, active);
    }

    protected String name;
    protected long cost;
    protected boolean active;
}
