====================
HOMEWORK P12 RESULTS
====================

Spring 2023

NOTE: We will not be grading for "correct" answers, since your results may vary, but rather answers that are consistent with your measured results.

IMPORTANT: If at all possible, time your program on a machine with at least 4 cores. (CSE VM may be configured to use multiple cores in the VirtualBox properties panel.)

FULL CREDIT
===========
QUESTION 1: Which puzzle did you use as ThreadsOfSudoku's parameter to achieve a 30+ second runtime (using "real"):
time java ThreadsOfSudoku 1 puzzle.txt #_zeros
05_zeros: 
real	0m0.249s
user	0m0.367s
sys	0m0.045s
10_zeros: 
real	0m0.420s
user	0m0.664s
sys	0m0.063s
//did 15 and it was too slow
// okay for comparison.lets do 13
13_zeros
real	0m23.397s
user	0m24.096s
sys	0m0.113s
reran: 
real	0m23.391s
user	0m23.913s
sys	0m0.125s

14_zeros
real	2m36.099s
user	2m36.428s
sys	0m0.273s
//so lets do 13_zeros again 



QUESTION 2: Provide the full ``time`` output for your program, with 1 to 16 threads. It may prove interesting to screenshot your system monitor while these run. You may be able to run all of these with a single bash command if you like (replace 14_zeros with your puzzle from QUESTION 1): 

for i in {1..16} ; do printf "\n Threads %d:\n" $i ; time (java ThreadsOfSudoku $i puzzle.txt 14_zeros > temp.txt) ; done

Example Timing (first 2 of 16 runs only on Antares):

ricegf@antares$ for i in {1..16} ; do printf "\n Threads %d:\n" $i ; time (java ThreadsOfSudoku $i puzzle.txt 14_zeros > temp.txt) ; done

 Threads 1:

real	2m0.684s
user	2m0.919s
sys	0m0.292s

 Threads 2:

real	1m4.553s
user	2m7.003s
sys	0m0.252s



YOUR Timing:
time java ThreadsOfSudoku 1 puzzle.txt 13_zeros
Thread 1: 
real	0m23.063s
user	0m23.587s
sys	0m0.104s
Thread 2:
real	0m15.110s
user	0m30.082s
sys	0m0.165s
Thread 3:
real	0m12.960s
user	0m38.415s
sys	0m0.209s

Thread 4: 
real	0m13.369s
user	0m47.897s
sys	0m0.751s
Thread 5: 
real	0m12.537s
user	0m46.742s
sys	0m0.382s
Thread 6: 
real	0m12.026s
user	0m44.830s
sys	0m0.420s
Thread 7: 
real	0m13.930s
user	0m50.088s
sys	0m0.793s
Thread 8: 
real	0m11.910s
user	0m45.171s
sys	0m0.414s
Thread 9: 
real	0m14.207s
user	0m51.683s
sys	0m0.964s
Thread 10: 
real	0m13.279s
user	0m50.257s
sys	0m0.313s
Thread 11: 
real	0m14.103s
user	0m50.975s
sys	0m0.902s

Thread 12: 
real	0m13.459s
user	0m50.242s
sys	0m0.572s

Thread 13: 
real	0m13.055s
user	0m49.298s
sys	0m0.387s

Thread 14:
real	0m12.802s
user	0m48.227s
sys	0m0.387s
 
Thread 15: 
real	0m13.336s
user	0m50.061s
sys	0m0.438s

Thread 16: 
real	0m13.510s
user	0m50.975s
sys	0m0.423s

QUESTION 3: Does adding more threads continue to speed up the program? Do more threads ever slow down the program slightly?  Why or why not?
Yes it does. but after thread 3 it jumps a little then stagnates, jumps up a little, and it varies from 13  to 12. to sometimes 14 & 11. It's much more linear compared to the full_credit in a way. 




QUESTION 4: Does adding more threads increase the "system load", or is it constant regardless of the number of threads?  Why?
^^^Check above answer^^^^. Unlike the full_credit it is SIGNIFICANTLY faster compared to the full_credit. it kind of is more linear after thread three in that it isn't as big of a number difference. 




BONUS //I'M ASSUMING THIS IS FOR THE BONUS & EXTREME BONUS
=====

QUESTION 5: Time your thread pool version of ThreadsOfSudoku as you did for the full credit version. Post your timings here.

YOUR Timing:
OHHH, I did that above in number 2. I deleted the full_credit result.txt for the bonus results. However, I can go look and check to & fro from bonus to full_credit. SEE QUESTION 2:





QUESTION 6: Is a thread pool faster, slower, or roughly equivalent in performance? 
Yes it signifanctly is. Like I said in question 3 & question 4. It's signifanctly smaller numbers. Also it's much more linear and smoorther than full_credit one. 

QUESTION 7: Compare the full credit and bonus solution code. Which do you believe is more supportable over a long lifetime of evolving hardware and environments?
Yes, when the first invention of the computer came to be it was slow. However, as time went by it became more efficent. just like this code. Thus, the bonus is more supportive. 


